import groovy.json.JsonSlurper
import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
  // The Android Gradle plugin is only required when opening the android folder stand-alone.
  // This avoids unnecessary downloads and potential conflicts when the library is included as a
  // module dependency in an application project.
  //if (project == rootProject) {
  repositories {
    google()
    jcenter()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:4.1.3'
    classpath "de.undercouch:gradle-download-task:4.1.1"
  }
  //}
}

apply plugin: 'com.android.library'
apply plugin: "de.undercouch.download"

def getExtOrDefault(name, defaultValue) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : defaultValue
}

android {
  compileSdkVersion getExtOrDefault('compileSdkVersion', 28)

  defaultConfig {
    minSdkVersion getExtOrDefault('minSdkVersion', 16)
    targetSdkVersion getExtOrDefault('targetSdkVersion', 28)

    externalNativeBuild {
      cmake {
        cppFlags "-fexceptions", "-frtti", "-std=c++1y", "-DONANDROID"
        abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
        arguments '-DANDROID_STL=c++_shared', "-DNODE_MODULES_DIR=${rootDir}/../node_modules"
      }
    }
  }

  lintOptions{
    abortOnError false
  }

  externalNativeBuild {
    cmake {
      path "CMakeLists.txt"
    }
  }

  packagingOptions {
    excludes = ["**/libc++_shared.so"]
  }

  buildFeatures {
    prefab true
  }

  configurations {
    extractHeaders
    extractJNI
  }
}

repositories {
  google()
  maven {
    // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
    url "$rootDir/../node_modules/react-native/android"
  }
  jcenter()
}

dependencies {
  //noinspection GradleDynamicVersion
  implementation 'com.facebook.react:react-native:+'
  implementation project(':react-native-reanimated')

  //noinspection GradleDynamicVersion
  extractHeaders("com.facebook.fbjni:fbjni:+:headers")
  //noinspection GradleDynamicVersion
  extractJNI("com.facebook.fbjni:fbjni:+")

  def rnAAR = fileTree("${rootDir}/../node_modules/react-native/android").matching({ it.include "**/**/*.aar" }).singleFile
  def jscAAR = fileTree("${rootDir}/../node_modules/jsc-android/dist/org/webkit/android-jsc").matching({ it.include "**/**/*.aar" }).singleFile

  def inputFile = new File(rootDir, '../node_modules/react-native/package.json')
  def json = new JsonSlurper().parseText(inputFile.text)
  def reactNativeVersion = json.version as String
  def (major, minor, patch) = reactNativeVersion.tokenize('.')
  def raAAR = "${rootDir}/../node_modules/react-native-reanimated/android/react-native-reanimated-${minor}-hermes.aar"

  extractJNI(files(rnAAR, jscAAR, raAAR))
  //extractJNI(files(jscAAR, raAAR))
}

// fbjni
// https://github.com/facebookincubator/fbjni/blob/master/docs/android_setup.md

task extractAARHeaders {
  doLast {
    configurations.extractHeaders.files.each {
      def file = it.absoluteFile
      copy {
        from zipTree(file)
        into "$buildDir/$file.name"
        include "**/*.h"
      }
    }
  }
}

task extractJNIFiles {
  doLast {
    configurations.extractJNI.files.each {
      def file = it.absoluteFile

      copy {
        from zipTree(file)
        into "$buildDir/$file.name"
        include "jni/**/*"
      }
    }
  }
}

// third-party-ndk deps headers
// mostly a copy of https://github.com/software-mansion/react-native-reanimated/blob/master/android/build.gradle#L115

def downloadsDir = new File("$buildDir/downloads")
def thirdPartyNdkDir = new File("$buildDir/third-party-ndk")
def thirdPartyVersionsFile = new File("${rootDir}/../node_modules/react-native/ReactAndroid/gradle.properties")
def thirdPartyVersions = new Properties()
thirdPartyVersions.load(new FileInputStream(thirdPartyVersionsFile))

def BOOST_VERSION = thirdPartyVersions["BOOST_VERSION"]
def boost_file = new File(downloadsDir, "boost_${BOOST_VERSION}.tar.gz")
def DOUBLE_CONVERSION_VERSION = thirdPartyVersions["DOUBLE_CONVERSION_VERSION"]
def double_conversion_file = new File(downloadsDir, "double-conversion-${DOUBLE_CONVERSION_VERSION}.tar.gz")
def FOLLY_VERSION = thirdPartyVersions["FOLLY_VERSION"]
def folly_file = new File(downloadsDir, "folly-${FOLLY_VERSION}.tar.gz")
def GLOG_VERSION = thirdPartyVersions["GLOG_VERSION"]
def glog_file = new File(downloadsDir, "glog-${GLOG_VERSION}.tar.gz")

task createNativeDepsDirectories {
  downloadsDir.mkdirs()
  thirdPartyNdkDir.mkdirs()
}

task downloadBoost(dependsOn: createNativeDepsDirectories, type: Download) {
  src("https://github.com/react-native-community/boost-for-react-native/releases/download/v${BOOST_VERSION.replace("_", ".")}-0/boost_${BOOST_VERSION}.tar.gz")
  onlyIfNewer(true)
  overwrite(false)
  dest(boost_file)
}

task prepareBoost(dependsOn: downloadBoost, type: Copy) {
  from(tarTree(resources.gzip(downloadBoost.dest)))
  from("src/main/jni/third-party/boost/Android.mk")
  include("Android.mk", "boost_${BOOST_VERSION}/boost/**/*.hpp", "boost/boost/**/*.hpp")
  includeEmptyDirs = false
  into("$thirdPartyNdkDir") // /boost_X_XX_X
  doLast {
    file("$thirdPartyNdkDir/boost_${BOOST_VERSION}").renameTo("$thirdPartyNdkDir/boost")
  }
}

task downloadDoubleConversion(dependsOn: createNativeDepsDirectories, type: Download) {
  src("https://github.com/google/double-conversion/archive/v${DOUBLE_CONVERSION_VERSION}.tar.gz")
  onlyIfNewer(true)
  overwrite(false)
  dest(double_conversion_file)
}

task prepareDoubleConversion(dependsOn: downloadDoubleConversion, type: Copy) {
  from(tarTree(downloadDoubleConversion.dest))
  from("src/main/jni/third-party/double-conversion/Android.mk")
  include("double-conversion-${DOUBLE_CONVERSION_VERSION}/src/**/*", "Android.mk")
  filesMatching("*/src/**/*", { fname -> fname.path = "double-conversion/${fname.name}" })
  includeEmptyDirs = false
  into("$thirdPartyNdkDir/double-conversion")
}

task downloadFolly(dependsOn: createNativeDepsDirectories, type: Download) {
  src("https://github.com/facebook/folly/archive/v${FOLLY_VERSION}.tar.gz")
  onlyIfNewer(true)
  overwrite(false)
  dest(folly_file)
}

task prepareFolly(dependsOn: downloadFolly, type: Copy) {
  from(tarTree(downloadFolly.dest))
  from("src/main/jni/third-party/folly/Android.mk")
  include("folly-${FOLLY_VERSION}/folly/**/*", "Android.mk")
  eachFile { fname -> fname.path = (fname.path - "folly-${FOLLY_VERSION}/") }
  includeEmptyDirs = false
  into("$thirdPartyNdkDir/folly")
}

task downloadGlog(dependsOn: createNativeDepsDirectories, type: Download) {
  src("https://github.com/google/glog/archive/v${GLOG_VERSION}.tar.gz")
  onlyIfNewer(true)
  overwrite(false)
  dest(glog_file)
}

task prepareGlog(dependsOn: downloadGlog, type: Copy) {
  from(tarTree(downloadGlog.dest))
  from("src/main/jni/third-party/glog/")
  include("glog-${GLOG_VERSION}/src/**/*", "Android.mk", "config.h")
  includeEmptyDirs = false
  filesMatching("**/*.h.in") {
    filter(ReplaceTokens, tokens: [
            ac_cv_have_unistd_h           : "1",
            ac_cv_have_stdint_h           : "1",
            ac_cv_have_systypes_h         : "1",
            ac_cv_have_inttypes_h         : "1",
            ac_cv_have_libgflags          : "0",
            ac_google_start_namespace     : "namespace google {",
            ac_cv_have_uint16_t           : "1",
            ac_cv_have_u_int16_t          : "1",
            ac_cv_have___uint16           : "0",
            ac_google_end_namespace       : "}",
            ac_cv_have___builtin_expect   : "1",
            ac_google_namespace           : "google",
            ac_cv___attribute___noinline  : "__attribute__ ((noinline))",
            ac_cv___attribute___noreturn  : "__attribute__ ((noreturn))",
            ac_cv___attribute___printf_4_5: "__attribute__((__format__ (__printf__, 4, 5)))"
    ])
    it.path = (it.name - ".in")
  }
  into("$thirdPartyNdkDir/glog")

  doLast {
    copy {
      from(fileTree(dir: "$thirdPartyNdkDir/glog", includes: ["stl_logging.h", "logging.h", "raw_logging.h", "vlog_is_on.h", "**/src/glog/log_severity.h"]).files)
      includeEmptyDirs = false
      into("$thirdPartyNdkDir/glog/exported/glog")
    }
  }
}

task prepareThirdPartyNdkHeaders {
  if (!boost_file.exists()) {
    dependsOn(prepareBoost)
  }
  if (!double_conversion_file.exists()) {
    dependsOn(prepareDoubleConversion)
  }
  if (!folly_file.exists()) {
    dependsOn(prepareFolly)
  }
  if (!glog_file.exists()) {
    dependsOn(prepareGlog)
  }
}

// pre-native build pipeline

tasks.whenTaskAdded { task ->
  if (task.name.contains('externalNativeBuild')) {
    task.dependsOn(extractAARHeaders)
    task.dependsOn(extractJNIFiles)
    task.dependsOn(prepareThirdPartyNdkHeaders)
  }
}
